import java.io.*;
import java.net.*;
import java.lang.reflect.*;

public class NERemoteObjectStub implements NERemote {
  String address, remoteInterfaceName;
  int port;
  int key;

  public NERemoteObjectReference (String addr, int p, int k, String riname) {
    address = addr;
    port = p;
    remoteInterfaceName = riname;
    key = k;
  }

  Object localise () {
    // Implement this as you like: essentially you should 
    // create a new stub object and returns it.
    // Assume the stub class has the name e.g.
    //
    //       Remote_Interface_Name + "_stub".
    //
    // Then you can create a new stub as follows:
    // 
    //       Class c = Class.forName(Remote_Interface_Name + "_stub");
    //       Object o = c.newinstance()
    //
    // For this to work, your stub should have a constructor without arguments.
    // You know what it does when it is called: it gives communication module
    // all what it got (use CM's static methods), including its method name, 
    // arguments etc., in a marshalled form, and CM (yourRMI) sends it out to 
    // another place. 
    // Here let it return null.
    return null;
  }
}
